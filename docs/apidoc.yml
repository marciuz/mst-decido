openapi: 3.0.0
servers:
  - description: Production website
    url: https://api.makingspeechestalk.com
  - description: Test website
    url: https://api-test.makingspeechestalk.com
info:
  description: |
    The API was created in the context of the DECIDO project (https://www.decido-project.eu/) in order to enable an integration of MakingSpeechesTalk (MST) with the Decido platform. The APIs represent the main entities of MST and allow the management of all activities related to listing the selection, creation, modification and deletion of instances. In detail, it is possible to manage the following entities: Channel, Document, Comment. 
    The standard http verbs GET, POST, PUT and DELETE are used to manage the operations.
  version: 1.0.3
  title: MakingSpeechesTalk API
  contact:
    email: marcello.verona@lisboncouncil.net
    name: M.Marcello Verona
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: management
    description: Calls with required authentication
security:
  - apiKey: []
paths:
  /channels:
    get:
      tags:
        - management
      summary: Get the list of available channels
      operationId: list_channels
      description: |
        The list of available channels, 
        related to the user id specified in a header.
      responses:
        '200':
          description: The list of channel object 
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'
                  error:
                    type: boolean
                    default: false
        '400':
          description: bad input parameter
  /channels/{id_ch}:
    parameters:
      - in: path
        name: id_ch
        description: Identificator of the channel
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - management
      summary: Get the channel with the documents
      operationId: get_channel
      description: |
        The detail of a channel, represented by the Channel object, 
        related to the user id specified in a header.
      responses:
        '200':
          description: The channel object
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    $ref: '#/components/schemas/Channel'
                  error:
                    type: boolean
                    default: false
        '400':
          description: bad input parameter
    put:
      tags:
        - management
      summary: Update channel
      operationId: update_channel
      description: Update a channel by sending some properties
      responses:
        '201':
          description: item updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        description: Channel item to be updated
    delete:
      tags:
        - management
      summary: Update channel
      operationId: delete_channel
      description: Update a channel by sending some properties
      responses:
        '202':
          description: item deleted
        '404':
          description: item not found
  /channels/{id_ch}/documents:
    parameters:
      - in: path
        name: id_ch
        description: Identificator of the channel
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - management
      summary: Get the list of available documents of a channel
      operationId: list_documents
      description: |
        List of the documents related to the channel {id_ch}
      responses:
        '200':
          description: The list of document of the channel 
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  error: 
                    type: boolean
                    default: false
        '400':
          description: bad input parameter
  /channels/new :
    post:
      tags:
        - management
      summary: Create a new channel
      operationId: create_channel
      description: Adds an item to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
        description: Channel item to add
  
  /documents/{id_speech}:
    parameters:
      - in: path
        name: id_speech
        description: Identificator of the document
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - management
      operationId: get_document
      responses:
        '200':
          description: The requested single document 
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Channel'
                  error: 
                    type: boolean
                    default: false
        '404':
          description: document not found
    put:
      tags:
        - management
      operationId: update_document
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        description: Channel item to be updated
    delete:
      tags:
        - management
      operationId: delete_document
      responses:
        '202':
          description: item deleted
        '404':
          description: item not found
          
  /documents/new:
    post: 
      tags:
        - management
      operationId: create_document
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
          
  /documents/{id_speech}/comments:
    parameters:
      - in: path
        name: id_speech
        description: Identificator of the document
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - management
      summary: Get the list of available comments of a document
      operationId: list_comments
      description: |
        List of the comments related to the document.
      responses:
        '200':
          description: The list of comments related to the document
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: bad input parameter
  /comments/{comment_id}:
    parameters:
      - in: path
        name: comment_id
        description: Identificator of the comment
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - management
      operationId: get_comment
      responses:
        '200':
          description: The single comment requested 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: bad input parameter
        '404':
          description: document not found
    put:
      tags:
        - management
      operationId: update_comment
      
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        description: Comment item to be updated
    delete:
      tags:
        - management
      operationId: delete_comment
      responses:
        '202':
          description: item deleted
        '404':
          description: item not found

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-Decido-Auth
  schemas:
    Channel:
      type: object
      required:
        - chname
        - title
        - author
        - lang
      properties:
        id_ch:
          type: integer
          example: 123
        chname:
          type: string
          example: SALL_Roadmap
        title:  
          type: string
          example: Policy Roadmap to European Policies for Living-Lab-Based Open Schooling
        creation:
          type: string
          format: date-time
          example: '2016-08-29 09:12:33'
        last_mod:
          type: string
          format: date-time
          example: '2016-08-29 09:12:33'
        introduction: 
          type: string
          format: long_text
        description: 
          type: string
          format: long_text
        author: 
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        lang:
          type: string
          default: en_US
          example: en_US (or) it_IT (or) es_ES ... 
          description: The language of the channel. Determine the translation of the labels.
        public:
          type: boolean
          format: integer
          default: 0
          example: 1
          description: Indicates whether the channel is visible to the public or not.
        logo: 
          type: string
          format: url
          example: https://mycloud-service.com/images/image.jpg
    Document:
      type: object
      description: The commentable text, with a fk to the channel as parent and the comments as childs
      required:
        - id_ch
        - title
        - html
      properties: 
        id_speech:
          type: integer
          example: 1234
        id_ch:
          type: integer
          description: foreing key
          example: 123
        title: 
          type: string
          example: My awesome commentable document
        html:
          type: string
          format: HTML with some tag allowed
        data_ins:
          type: string
          format: date-time
          example: '2021-08-29 09:12:33'
        visibility:
          type: boolean
          format: integer
          default: 1
        last_update:
          type: string
          format: date-time
          example: '2021-08-29 09:12:33'
        speaker: 
          type: string
          example: John Doe
          description: the author of the document, if needed
        pars:
          type: array
          items:
            $ref: '#/components/schemas/Paragraph'
    Comment:
      type: object
      required: 
        - comment_id
        - id_speech
        - comm
        - user_id
      properties:
        comment_id:
          type: integer
          format: unsigned
          example: 12345
        id_speech:
          type: integer
          format: unsigned 
          example: 12345
        ip:
          type: string
          format: ipv4
          example: 110.22.34.56
        published:
          type: number
          description: 0=in waiting, 1=published, -1=spam, -2=reported by users
          enum:
            - 0
            - 1
            - -1
            - -2
          default: 1
        comm: 
          type: string
          example: "I think this sentence is interesting because..."
          description: the comment related to the sentence
        user_id: 
          type: string
          format: uuid
          description: the identificator of the user
          example: 123e4567-e89b-12d3-a456-426614174000
    Paragraph:
      type: object 
      description: The HTML of the document, parsed and cutted in multiple commentable elements
      required:
        - id_p
        - id_speech  
      properties: 
        id_p: 
          type: integer
          description: Unique id of the paragraph
          example: 100
        id_speech: 
          type: integer
          description: Parent's document id
          example: 123
        p:
          type: string
          description: the single, commentable element. Can be a paragraph or a list element, etc.
          example: "The lazy dog jumped over the quick brown fox"
        ord:
          type: integer
          description: the list number (used for sorting)
          example: 5